name: Build Android APK
on:
  workflow_dispatch:
    inputs:
      oldVersionUrl:
        description: '上一版本下载地址'
        required: true
        type: string
      oldVersionCode:
        description: '上一版本版本号'
        required: true
        type: string
      betaVersion:
        description: '测试版本'
        required: true
        default: true
        type: boolean
      forceUpdate:
        description: '是否强制更新'
        required: true
        default: false
        type: boolean
env:
  OUTPUT_DIR: "app/build/outputs/apk/debug"
  SIGN_KEY_ALIAS: ${{ secrets.SIGN_KEY_ALIAS }}
  SIGN_KEY_STORE_PASSWORD: ${{ secrets.SIGN_KEY_STORE_PASSWORD }}
  SIGN_KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}
  SIGN_KEY_STORE_FILE: "/tmp/key.jks"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: 设置JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: 设置Android SDK
        uses: android-actions/setup-android@v2
      - name: 解密签名
        run: |
            echo ${{ secrets.SIGN_KEY_BASE64 }} | base64 --decode > /tmp/key.jks
      - name: 构建 APK
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: assembleRelease
      - name: 安装工具
        run: |
          sudo apt-get install jq bsdiff
          mkdir patch
          curl -# -o "patch/old.apk" ${{ inputs.oldVersionUrl }}
      - name: 解析编译文件路径
        id: apk
        run: |
          versionName=$(cat "${{ env.OUTPUT_DIR }}/output-metadata.json" | jq -r '.elements[0].versionName')
          versionCode=$(cat "${{ env.OUTPUT_DIR }}/output-metadata.json" | jq -r '.elements[0].versionCode')
          apkFile=$(cat "${{ env.OUTPUT_DIR }}/output-metadata.json" | jq -r '.elements[0].outputFile')
          
          cp "${{ env.OUTPUT_DIR }}/${{ env.apkFile }}" "patch/new.apk"
          
          echo ::set-output name=versionName::$versionName
          echo ::set-output name=versionCode::$versionCode
          echo ::set-output name=apkFile::$apkFile
      - name: 上传 APK
        uses: actions/upload-artifact@v1
        with:
          name: debug.apk
          path: ${{ env.OUTPUT_DIR }}/${{ steps.apk.outputs.apkFile }}
      - name: 生成 patch 文件
        id: patch
        run: |
          echo "${{ steps.apk.outputs.versionName }}"
          echo "${{ steps.apk.outputs.versionCode }}"
          patchFile="${{ inputs.oldVersionCode }}-${{ steps.apk.outputs.versionCode }}.patch"
          bsdiff "patch/old.apk" "patch/new.apk" "patch/$patchFile"
          
          echo ::set-output name=patchFile::$patchFile
          
          apkMd5=$(md5sum "patch/new.apk" | cut -d" " -f1)
          patchMd5=$(md5sum "patch/$patchFile" | cut -d" " -f1)

          echo "=========================================="
          echo "新版本：${{ steps.apk.outputs.versionName }}-${{ steps.apk.outputs.versionCode }}"
          ls -l "patch/new.apk"
          echo "md5: $apkMd5"
          echo "=========================================="
          echo "增量包：${patchFile}"
          ls -l "patch/$patchFile"
          echo "md5: $patchMd5"
          echo "=========================================="
          
          echo ::set-output name=apkMd5::$apkMd5
          echo ::set-output name=patchMd5::$patchMd5
      - name: 上传 APK 文件签名
        id: upload_apk
        run: |
          file="patch/new.apk"
          title="${{ steps.apk.outputs.versionName }}-${{ steps.apk.outputs.versionCode }}.apk"
          mimeType="application/vnd.android.package-archive"
          fileSize=$(wc -c <"$file")
          json='{"serviceName":"","storeType":"apk",fileSize:$fileSize,mimeType:$mimeType,title:$title}'
          requestJson=$(
            jq \
              --arg fileSize "$fileSize" \
              --arg title "$title" \
              --arg mimeType "$mimeType" \
              -n "$json"
          )
          apkSignResp=$(
            curl -s -X POST "${{ secrets.SIGNATURE_API }}" \
              -H 'Content-Type: application/json' \
              -d "$requestJson"
          )
          uploadUrl=$(echo "$apkSignResp" | jq -r '.uploadUrl')
          key=$(echo "$apkSignResp" | jq -r '.uploadMeta.key')
          token=$(echo "$apkSignResp" | jq -r '.uploadMeta.signature')
          
          echo ::set-output name=uploadUrl::$uploadUrl
          echo ::set-output name=key::$key
          echo ::set-output name=token::$token
      - name: 上传 APK 文件
        id: upload_apk_response
        uses: JantHsueh/upload-file-action@master
        with:
          url: "${{ steps.upload_apk.outputs.uploadUrl }}"
          method: POST
          forms: '{"key":"${{ steps.upload_apk.outputs.key }}","token":"${{ steps.upload_apk.outputs.token }}"}'
          fileForms: '{"file":"patch/new.apk"}'
      - name: 上传 patch 文件签名
        id: upload_patch
        run: |
          file="patch/${{ steps.patch.outputs.patchFile }}"
          title="${{ steps.patch.outputs.patchFile }}"
          mimeType="text/x-diff"
          fileSize=$(wc -c <"$file")
          json='{"serviceName":"","storeType":"apk",fileSize:$fileSize,mimeType:$mimeType,title:$title}'
          requestJson=$(
            jq \
              --arg fileSize "$fileSize" \
              --arg title "$title" \
              --arg mimeType "$mimeType" \
              -n "$json"
          )
          apkSignResp=$(
            curl -s -X POST "${{ secrets.SIGNATURE_API }}" \
              -H 'Content-Type: application/json' \
              -d "$requestJson"
          )
          uploadUrl=$(echo "$apkSignResp" | jq -r '.uploadUrl')
          key=$(echo "$apkSignResp" | jq -r '.uploadMeta.key')
          token=$(echo "$apkSignResp" | jq -r '.uploadMeta.signature')
          
          echo ::set-output name=uploadUrl::$uploadUrl
          echo ::set-output name=key::$key
          echo ::set-output name=token::$token
      - name: 上传 patch 文件
        id: upload_patch_response
        uses: JantHsueh/upload-file-action@master
        with:
          url: "${{ steps.upload_patch.outputs.uploadUrl }}"
          method: POST
          forms: '{"key":"${{ steps.upload_patch.outputs.key }}","token":"${{ steps.upload_patch.outputs.token }}"}'
          fileForms: '{"file":"patch/new.apk"}'
      - name: 发布新版本
        run: |
          apkResponse=${{ steps.upload_apk_response.outputs.output.data }}
          apkResourceId=$(echo "$apkResponse" | jq -r '.resourceId')
          patchResponse=${{ steps.upload_patch_response.outputs.output.data }}
          patchResourceId=$(echo "$patchResponse" | jq -r '.resourceId')
          
          echo $apkResourceId
          echo $patchResourceId
          
          updateLog=$(cat "version.log")
          
          json='{apkResourceId:$apkResourceId,apkMd5:$apkMd5,patchResourceId:$patchResourceId,patchMd5:$patchMd5,updateLog:$updateLog,versionCode:$versionCode,versionName:$versionName,lastVersionCode:$lastVersionCode,forceUpdate:$forceUpdate,betaVersion:$betaVersion}'
          requestJson=$(
          jq \
          --arg apkResourceId "$apkResourceId" \
          --arg apkMd5 "${{ steps.patch.outputs.apkMd5 }}" \
          --arg patchResourceId "$patchResourceId" \
          --arg patchMd5 "${{ steps.patch.outputs.patchMd5 }}" \
          --arg updateLog "${updateLog}" \
          --arg versionCode "${{ steps.apk.outputs.versionCode }}" \
          --arg versionName "${{ steps.apk.outputs.versionName }}" \
          --arg lastVersionCode "${{ inputs.oldVersionCode }}" \
          --arg forceUpdate "${{ inputs.forceUpdate }}" \
          --arg betaVersion "${{ input.betaVersion }}" \
          -n "$json"
          )
          curl -s -X POST "${{ secrets.NEW_VERSION_API }}" \
            -H 'Content-Type: application/json' \
            -d "$requestJson"

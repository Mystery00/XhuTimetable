name: Build iOS Nightly
on:
  workflow_dispatch:
jobs:
  build-ios:
    runs-on: macos-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 设置JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: 解密签名
        run: |
          echo ${{ secrets.SIGN_KEY_BASE64 }} | base64 --decode > /tmp/key.jks
          echo ${{ secrets.AG_CONNECT_JSON }} | base64 --decode > composeApp/agconnect-services.json
      - run: chmod a+x gradlew
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
      - name: 更新iOS应用版本号
        env:
          SIGN_KEY_ALIAS: ${{ secrets.SIGN_KEY_ALIAS }}
          SIGN_KEY_STORE_PASSWORD: ${{ secrets.SIGN_KEY_STORE_PASSWORD }}
          SIGN_KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}
          SIGN_KEY_STORE_FILE: "/tmp/key.jks"
          GITHUB_USERNAME: ${{ secrets.NEXUS_USER }}
          GITHUB_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          ./gradlew composeApp:exportLibraryDefinitions
          ./gradlew composeApp:updateAppleBuildVersion
      - name: Determine File To Build
        shell: bash
        run: |
          echo "[XCode-Deploy]: Determining file to build..."
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" \
          && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; \
          else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "TYPE=$filetype_parameter" >> $GITHUB_ENV
          echo "FILE_TO_BUILD=$file_to_build" >> $GITHUB_ENV
          echo "PROJECT_NAME=$(echo "$file_to_build" | cut -f 1 -d '.')" >> $GITHUB_ENV
      - name: Setup Pods
        shell: bash
        run: |
          echo "[XCode-Deploy]: Installing Pods..."
          pod install
      - name: Resolve Package Dependencies
        shell: bash
        run: |
          echo "[XCode-Deploy]: Resolving Package Dependencies..."
          xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .
      - name: Setup Scheme
        shell: bash
        run: |
          echo "[XCode-Deploy]: Searching for default Scheme..."
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          scheme=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $scheme | cat >scheme
          echo "[XCode-Deploy]: Using default scheme: $scheme..."
          echo "SCHEME=$scheme" >> $GITHUB_ENV
      - name: Import Certificates
        uses: apple-actions/import-codesign-certs@v1
        id: codesign
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          keychain: codesign
      - name: Install App Store Profile
        uses: akiojin/install-provisioning-profile-github-action@v1.0
        with:
          base64: ${{ secrets.IOS_PROVISION_PROFILE }}
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: latest-stable
      - name: Build and Archive
        uses: sersoft-gmbh/xcodebuild-action@v2
        with:
          action: archive
          ${{ env.TYPE }}: ${{ env.FILE_TO_BUILD }}
          scheme: ${{ env.SCHEME }}
          sdk: iphoneos
          build-settings: >
            -archivePath ${{ env.PROJECT_NAME }}.xcarchive
          derived-data-path: build/derivedData
          destination: generic/platform=iOS
          configuration: Release
      - name: Get App Store Connect API Key
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: AuthKey_${{ secrets.IOS_APPSTORE_API_KEY_ID }}.p8
          fileDir: ${{ github.workspace }}/private_keys
          encodedString: ${{ secrets.IOS_APPSTORE_API_PRIVATE_KEY }}
      - name: Export Xcode archive
        shell: bash
        env:
          EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PRODUCTION }}
        run: |
          echo "[XCode-Deploy]: Exporting archive using xcodebuild..."
          EXPORT_PLIST_PATH=${{ github.workspace }}/ExportOptions.plist
          echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
          xcodebuild -exportArchive -verbose \
          -sdk iphoneos \
          -archivePath ${{ github.workspace }}/${{ env.PROJECT_NAME }}.xcarchive  \
          -exportOptionsPlist ${{ github.workspace }}/ExportOptions.plist \
          -exportPath ${{ github.workspace }} \
          -authenticationKeyIssuerID ${{ secrets.IOS_APPSTORE_ISSUER_ID }} \
          -authenticationKeyID ${{ secrets.IOS_APPSTORE_API_KEY_ID }} \
          -authenticationKeyPath ${{ github.workspace }}/private_keys/AuthKey_${{ secrets.IOS_APPSTORE_API_KEY_ID }}.p8 \
      - name: Upload to App Store Connect
        shell: bash
        run: |
          echo "[XCode-Deploy]: Uploading archive using altool..."
          xcrun altool --upload-app -f ${{ github.workspace }}/${{ env.PROJECT_NAME }}.ipa -t iOS \
          --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }} --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }}
      - name: Cleanup
        shell: bash
        run: |
          echo "[XCode-Deploy]: Removing Keychain and private_keys folder..."
          security delete-keychain codesign.keychain
          rm  -rf ${{ github.workspace }}/private_keys || true